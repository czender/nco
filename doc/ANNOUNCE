$Header$ -*-text-*-

netCDF Operators NCO version 5.1.7 burst forth

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nc/ncoo (Source Code, Issues, Releases)

What's new?
Version 5.1.7 simplifies netCDF codec invocation in ncremap/ncclimo,
ensures ncremap places gridcell vertices on the same branch cut at
longitude discontinuities, and fixes two issues with Intel compilers.
Skip this release if these issues are of no import to you.

Work on NCO 5.1.8 has commenced and aims to add support for Zarr S3
stores, and to polish support for new codecs..

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. ncremap and ncclimo now support the same API for codec invocation
as the binary NCO operators, i.e., --cmp_sng=<compression_string>.
For example, the following commands instruct the regridder to apply
the Shuffle filter, then Granular BitRound quantization, then
Zstandard lossless compression: 

ncremap -7 --cmp='shf|gbr|zst' --map=map.nc in.nc out.nc
ncremap -7 --cmp='shf|gbr=3|zst=3' ... # Explicit levels
ncclimo -7 --cmp='shf|gbr|zst' ...
ncclimo -7 --cmp='shf|gbr=3|zst=3' ... # Explicit levels

The second command is equivalent to the first since the default
number of significant digits to retain during quantization is 3,
and the default Zstandard compression level is also 3. 
The resulting compression metadata can be viewed with, e.g.,

zender@spectral:~$ ncks --hdn -C -v FSNT -m ~/foo.nc
netcdf foo {
...

  variables:
    float FSNT(time,lat,lon) ;
      FSNT:_QuantizeGranularBitRoundNumberOfSignificantDigits = 3 ;
      FSNT:_Storage = "chunked" ;
      FSNT:_ChunkSizes = 1, 180, 360 ;
      FSNT:_Filter = "32015,3" ;
      FSNT:_Shuffle = "true" ;
      ...

} // group /

http://nco.sf.net/nco.html#cmp
http://nco.sf.net/nco.html#zst
http://nco.sf.net/nco.html#gbr

B. ncremap now always places gridcell vertices on the same branch cut
at longitude discontinuities. Consider a quadrilateral gridcell that
crosses the Greenwich Meridian and that has vertice longitudes at,
(enumerated in counter-clockwise order), occur at [359, 1, 1, 359].
This enumeration has the advantage of keeping all longitudes within
the same 360 degree domain [0..360] as the longitude centers. However, 
it violates the spirit of the CF Conventions which (seem to) prefer
that all vertice longitudes have values on the same "branch cut",
i.e., [-1, 1, 1, -1]. The CF enumeration has the advantage that the
vertices can be linearly averaged to find the gridcell center.
NCO now always uses the CF-preferred method when writing longitude
vertices to the output file. NB: the NCO weight generator still
places the vertices in the old order in the map-file. We plan to
fix that in the next release. Well-behaved regridders (like NCO's)
do the right thing no matter what longitude vertice convention is
employed in the map-file. Thanks to Steven Po-Chedley and Jill Zhang
(LLNL) for bringing this issue to our attention.

BUG FIXES:
   
A. The previous version (5.1.6) failed to compile with Intel compilers
due to an OpenMP issue. This issue has been fixed. Thanks to Matthew
Thompson (GSFC) for pointing this out.

B. Intel compilers could not compile the previous version (5.1.6) even
when NCO was configured with configure --disable_openmp. This issue
has also been fixed. Thanks to Timothy Brown (AWS) for pointing this
out. 

Full release statement at http://nco.sf.net/ANNOUNCE
    
KNOWN PROBLEMS DUE TO NCO:

This section of ANNOUNCE reports and reminds users of the
existence and severity of known, not yet fixed, problems. 
These problems occur with NCO 5.1.7 built/tested under
MacOS 13.4.1 (c) with netCDF 4.9.3-dev on HDF5 1.14.1 and with
Linux FC38 with netCDF 4.9.2 on HDF5 1.14.1.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

