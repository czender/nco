$Header$ -*-text-*-

The netCDF Operators NCO version 5.0.0 have arrived.

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco (Source Code, Issues, Releases, Developers)

What's new?
Version 5.0.0 contains more ncremap features and a few fixes.
You can skip this release unless you use ncremap or ncclimo.
ncremap has crucial fixes for

Work on NCO 5.0.0 has commenced and will continue improving support
for analysis of land surface datasets packed into sparse-1D formats,
and ncremap support for the MOAB regridding package mbtempest. 

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. The ncremap regridder now creates a "title" global attribute in the
   the output file if the input file did not already have a title.
   This title attribute is described and supported by the NUG and CF.
   Moreover, the Panoply file catalog uses it to describe open files.
   http://nco.sf.net/nco.html#ncremap

A. ncremap now accepts a --no_prm (--no_permute) flag that causes 
   the regridder to skip the default permutation of dimensions
   before regridding (notably MPAS) datasets known to store data
   with most-rapidly varying dimensions that are not horizontal.
   ncremap normally ensures that input fields are stored in the
   shape expected by regridder weights (horizontal dimensions last)
   by permuting the dimensions with ncpdq. However, permutation
   consumes time and generates an extra intermediate file.
   Avoid this time penalty by using the --no_prm flag if the input
   fields are known to have trailing horizontal dimensions.
   ncremap --no_prm -P mpas -v sic -m map.nc in.nc out.nc
   http://nco.sf.net/nco.html#no_prm
   http://nco.sf.net/nco.html#ncremap

A. ncremap now accepts a --add_fll (--add_fill_value) flag that causes 
   the regridder to add a _FillValue attribute to fields with empty
   destination cells. Empty destination cells are those that have no
   non-zero weights from the source grids. Should a field (e.g.,
   air temperature) without a _FillValue be mapped to such a grid,
   the empty destination values are normally set to 0.0, since no
   source grid cells contribute. However, 0.0 is a valid value for
   many geophysical fields. Use this switch to ensure that empty
   destination gridcells are always set to _FillValue. The default
   _FillValue will be used in the output file for input fields that
   lack a _FillValue. This flag has no effect on input fields that
   already have a _FillValue.
   ncremap --add_fll -v FLNS -m map.nc in.nc out.nc
   http://nco.sf.net/nco.html#add_fll
   http://nco.sf.net/nco.html#ncremap

A. ncremap now accepts a --msk_apl (--mask_apply) flag that causes
   the regridder to apply msk_out (i.e., mask_b) to variables after
   regridding. Some weight generators (e.g., Tempest) ignore masks
   and thus produce non-zero weights for masked destination cells,
   and/or from masked source cells. This flag causes regridded files 
   produced with such map-files to adhere to the destination mask
   rules (though source mask rules may still be violated). This 
   feature is especially useful in placing missing values (aka,
   _FillValue) in destination cells that should be empty, so that
   regridded files have distributions of _FillValues identical
   with output from other weight-generators such as ESMF and NCO.
   ncremap --msk_apl -v FLNS -m map.nc in.nc out.nc
   http://nco.sf.net/nco.html#msk_apl
   http://nco.sf.net/nco.html#ncremap

A. ncremap now includes the coordinates xgrid, ygrid in its internal
   database so that it can automatically recognize and infer grids
   from NOAA SSM/I, AMSR-E, and SMMR Climate Data Record (CDR)
   datasets. Thanks to Mat Maltrud of LANL for prompting this. 
   ncremap -d ~/ssmi_cdr_raw.nc -g ${DATA}/grids/ssmi_304x448.nc
   http://nco.sf.net/nco.html#ncremap

BUG FIXES:

A. MacOS Conda builds now behave correctly with OpenMP, which was
   buggy with 4.9.9 on MacOS with Conda.
   This will make map-file generation with the NCO algorithms much
   faster for high-resolution maps.
   Thanks to Xylar Asay-Davis of LANL for helping to test this.

A. ncremap fixes a recently introduced problem with node-indexing
   in MPI mode. The workaround is to use background mode, and the
   solution is to upgrade.
   http://nco.sf.net/nco.html#par_typ_ncremap

A. ncremap now skips the stdin check when -i in_fl is used.
   The previous behavior led to hangs with some queuing systems
   (Slurm) on some machines (Chrysalis) that reserve stdin for
   the batch queue commands (srun). The workaround is to use the
   --no_stdin flag, and the solution is to upgrade. Thanks to Xylar
   Asay-Davis of LANL for reporting this issue.

A. ncks -X now handles branch cut rules correctly when WESN bounding
   box of auxiliary (e.g., unstructured) coordinate grids wrap in
   longitude. This permits ncremap RRG to work correctly in those same
   situations. Thanks to Po-Lun Ma of PNNL for prompting this fix.

Full release statement at http://nco.sf.net/ANNOUNCE

KNOWN PROBLEMS DUE TO NCO:

   This section of ANNOUNCE reports and reminds users of the
   existence and severity of known, not yet fixed, problems. 
   These problems occur with NCO 5.0.0 built/tested under
   MacOS 11.3.1 with netCDF 4.8.0 on HDF5 1.10.7 and with
   Linux with netCDF 4.8.0 on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

