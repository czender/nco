$Header$ -*-text-*-

netCDF Operators NCO version 5.0.7 are unfurled

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco (Source Code, Issues, Releases, Developers)

What's new?
Version 5.0.7 has new fixes and features for ncremap and ncclimo
that ensure correct treatment of sub-gridscale fields and missing
values. ncremap now allows and adjusts for missing values in SGS
fields. Previously such missing values could botch SGS normalization.
Users of SGS regridding are encouraged to upgrade. Others can skip
this release.

Work on NCO 5.0.8 has commenced and will improve support for modern
quantization/compression algorithms expected to be in netCDF 4.9.0.

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. ncremap now emits a WARNING when a dataset contains a sub-gridscale 
(SGS) indicator variable, such as landfrac (for ELM/CLM), or
timeMonthly_avg_iceAreaCell (for MPASSI), or aice (for CICE), and yet
SGS regridding was not invoked. This will help avert some inadvertent
misuse of the regridder by users unfamiliar with the need for SGS
regridding of datasets where values are only valid over fractions of
gridcells.
ncremap -P elm --map=map.nc in.nc out.nc
http://nco.sf.net/nco.html#sgs

B. ncremap now allows for missing values in fields with valid SGS area.
ncremap previously assumed to be valid wherever sgs_frc > 0.0.
This assumption is valid for ~95% of ELM/CLM fields.
However, it low-biased landunit-specific fields (like TSOI, H2OSOI) in
transition areas (e.g., ablation zone) with valid SGS, invalid landunit.
Now sub-SGS values are extrapolated, incorrect though not crazy-bad.
No more temperatures near 0.0 for landunit-specific fields in ELM/CLM.
Deriving and using landunit area as SGS field is only correct method. 
The current method is the best possible with that uses a single SGS
fraction for normalization.
ncremap -P elm --map=map.nc in.nc out.nc
http://nco.sf.net/nco.html#sgs

BUG FIXES:
   
A. NCO 5.0.6 produced incorrect results when sub-gridscale (SGS)
regridding is invoked by calling ncclimo (or ncremap) with the -P
prc_typ option alone because an ncremap bug prevented that option from
being fully parsed. As a result, the -P prc_typ did not correctly
trigger SGS regridding. The workaround to obtain proper SGS
normalization with NCO 5.0.6 is to explicitly invoke ncclimo (or
ncremap) with the -P prc_typ option AND the --sgs_frc=landfrac
(for ELM/CLM) or --sgs_frc=timeMonthly_avg_iceAreaCell (for MPASSI)
options. To be clear, this workaround only need be applied to
processing of ELM/CLM (not EAM/CAM) and MPASSI (not MPASO) output.
It is recommended to use -P where appropriate, and -P remains
essential in processing MPAS data. As of version 5.0.7, -P is all
that is required, and --sgs_frc is only needed in special cases.
The solution is to upgrade, and let -P fulfill its intended
role of triggering SGS regridding and other dataset-specific tasks
without the user herself having to explicitly turn on all the
switches.

B. ncremap's --add_fll option previously always wrote NC_FILL_DOUBLE
into unmapped gridcells. Now it will prefer to write the defined
_FillValue if one exists.

Full release statement at http://nco.sf.net/ANNOUNCE
    
KNOWN PROBLEMS DUE TO NCO:

This section of ANNOUNCE reports and reminds users of the
existence and severity of known, not yet fixed, problems. 
These problems occur with NCO 5.0.7 built/tested under
MacOS 12.1 with netCDF 4.8.1 on HDF5 1.12.0 and with
Linux with netCDF 4.8.1 on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

