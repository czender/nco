$Header$ -*-text-*-

netCDF Operators NCO version 5.0.5 are cartwheeling towards you.

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco (Source Code, Issues, Releases, Developers)

What's new?
Version 5.0.5 brings a new lossy quantization codec, BitRound.
ncclimo has improved API consistency between climo generation and
timeseries extraction. ncatted introduces a new editing mode:
prepending. If these issues do not interest you, you might skip
5.0.5. 

Work on NCO 5.0.6 has commenced and will improve ncremap support
for mbtempest, incorporate new mbtempest improvements, and further
improve support for quantization/compression algorithms.

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. Arithmetic operators now support the lossy quantization algorithm
known as BitRound. The BitRound algorithm is described in "A note on
precision-preserving compression of scientific data" by R. Kouznetsov,
doi:10.5194/gmd-14-377-2021. BitRound has been used to quantize more
accurately in NCO's BitGroom and GranularBR algorithms for over a
year. However, though algorithms select the number of bits to quantize
internally. Now BitRound is an independently configurable algorithm in
its own right. It takes a user-specified number of significant bits
(NSB, or "keepbits) to retain. The NSB argument contrasts with the
number of significant digits (NSD) parameter expected by BitGroom,
DigitRound, and GranularBR. BitRound is Bit-Adjustment-Algorithm #8.  

ncks --baa=8 --ppc default=9 in.nc out.nc # BitRound NSB=9
ncks --baa=4 --ppc default=3 in.nc out.nc # GranularBR NSD=3

Thanks to Milan Klower and R. Kouznetsov for prototyping BitRound in
the first place.

B. ncclimo now accepts filenames from stdin or positional arguments
in monthly climo mode. Previously, ncclimo self-generated input
filenames for monthly climos, given the caseid, and start/end years.
Now ncclimo can be fed a list of filenames to climatologize.
The API is identical to providing filenames to the splitter:
pipe filenames through stdin or place them on the command-line.
This makes the climo generator even more flexible than the splitter
which cannot (yet) generate filenames internally. However, the
flexibility of providing filenames via stdin or positional arguments
is more error-prone than using internally generated filenames that
are, by construction, guaranteed to be in the correct sequence.
User-provided filenames are vetted en masse to ensure that the
expected number of files for the specified climatology are present.
They are not vetted to ensure that they are in the correct order,
i.e., January then February then March of the correct year etc.
The $caseid argument is optional when the user provides the files.
However, ncclimo needs to know what to name the output files.
The $caseid argument or the $fml_nm argument, when present, provides 
the output filename stub. When neither of these options are present
ncclimo will name the output files after the model name, if known.

ls mpaso*.nc | ncclimo -P mpaso -s 50 -e 100 -o out # Stdin
ls eam*h0*.nc | ncclimo --fml=name -s 50 -e 100 -o out # Stdin
ncclimo -P mpaso -s 50 -e 100 -o out mpaso*.nc # Positional
ncclimo --fml=name -s 50 -e 100 -o out eam*h0*.nc # Positional

http://nco.sf.net/nco.html#ncclimo

C. ncatted has a new edit mode: Prepend. Analogous to append mode,
prepend mode will prepend the user-specified value to the attribute
and if the attribute does not exist it will be created:

ncatted -a char_att,att_var,p,c,"this is prepended.\n" in.nc out.nc

http://nco.sf.net/nco.html#att_prepend

BUG FIXES:
   
A. ncclimo 5.0.4 inadvertently broke automatic filename generation for
MPAS. The workaround is to pipe the input filenames through stdin or
supply them on the command-line. The solution is to upgrade. Thanks to
Xylar Asay-Davis for reporting this issue.

B. ncclimo 5.0.4 always prepending the CWD of the operator to the
input file location in climo mode. This prevented ncclimo from working
correctly with stdin filenames that included an absolute path.
The workaround is to run ncclimo from the input file directory.
The solution is to upgrade. Thanks again to Xylar Asay-Davis for
reporting this issue. 

C. ncatted had a longstanding bug triggered when using modify mode to
try to change the value of the _FillValue attribute in a netCDF4 file
when the attribute did not already exist. Talk about a corner case!
The solution is to upgrade.

Full release statement at http://nco.sf.net/ANNOUNCE
    
KNOWN PROBLEMS DUE TO NCO:

This section of ANNOUNCE reports and reminds users of the
existence and severity of known, not yet fixed, problems. 
These problems occur with NCO 5.0.5 built/tested under
MacOS 12.1 with netCDF 4.8.1 on HDF5 1.12.0 and with
Linux with netCDF 4.8.1 on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

