$Header$ -*-text-*-

netCDF Operators NCO version 5.0.4 are on tap

http://nco.sf.net (Homepage, Mailing lists, Help)
http://github.com/nco (Source Code, Issues, Releases, Developers)

What's new?
Version 5.0.4 contains significant improvements to the quantization
algorithms and fixes to MOAB/mbtempest regridding. NCO now supports
the Digit Round and Granular BitGroom quantization algorithms.

Work on NCO 5.0.5 has commenced and will improve ncremap support
for MOAB, incorporate new MOAB improvements, and further improve
quantization metadata and algorithms.

Enjoy,
Charlie

NEW FEATURES (full details always in ChangeLog):

A. ncremap removes the previous assumption that input horizontal
   dimensions are in lat-lon order. The order can now be lat-lon
   or lon-lat. The old behavior would fail when attempting to
   regrid variables whose horizontal dimensions were lon-lat to
   an unstructured grid.

A. ncremap now prefers to call its inverse distance-weighted
   interpolation/extrapolation algorithm "idw" for "inverse
   distance-weighted" rather than "dwe" for distance-weighted
   extrapolation. However, both forms are acceptable and
   back-compatibility was maintained.

A. ncremap adds the --area_dgn flag to diagnose (rather than copy) the
   area of each gridcell in an inferred grid-file. By default, ncremap
   simply copies the area variable, if found, into the grid_area
   variable of the inferred SCRIP grid-file. When --area_dgn is
   invoked, ncremap instead computes the values of grid_area based on
   the gridcell boundaries in the input template file.
   ncremap --area_dgn -d dst.nc -g grid.nc
   http://nco.sf.net/nco.html#area_dgn
   Note that --area_dgn has no effect on any mapping weights
   subsequently generated from the grid-file because most
   weight-generators base their weights on internally computed cell 
   areas (ERWG does have an option, --user_areas, to override this
   behavior). 
   
A. ncremap introduces changes the API for the --permute option:
   Previously the argument needed to include the entire option
   string to be passed to ncpdq including the -a component, e.g.,
   --permute='-a time,new_dim,lat,lon'.
   Now ncremap supplies the implicit -a internally so the user does
   not need to know the ncpdq syntax. 
   ncremap --permute=Time,new_dim,nCells  --map=map.nc in.nc out.nc
   ncremap --permute=time,new_dim,lat,lon --map=map.nc in.nc out.nc
   http://nco.sf.net/nco.html#permute
   http://nco.sf.net/nco.html#pdq
   
BUG FIXES:
   
A. ncwa was making a bad call to set compression parameters.
   That never caused a problem until netCDF 4.8.0 which enforces
   stricter adherence to the calling constraints rather than ignoring
   bad parameters. The symptoms were errors when averaging compressed
   datasets. The workaround is to convert the dataset to netCDF3,
   then average, then recompress. The solution is to upgrade.
   Thanks to Thomas Reichler and Michael Rollings for reporting this.

A. netCDF 4.8.0 changed its internal implementation of deflation.
   Before netCDF 4.8.0, deflation could be set multiple times.
   The properties of final the final call would take effect.
   After netCDF 4.8.0 only the first call takes effect.
   This caused subtle changes in NCO compression behavior.
   The most visible change was that uncompressing variables silently
   stopped working. NCO has been changed to adhere to the new
   netCDF 4.8.0+ behavior.

Full release statement at http://nco.sf.net/ANNOUNCE
    
KNOWN PROBLEMS DUE TO NCO:

This section of ANNOUNCE reports and reminds users of the
existence and severity of known, not yet fixed, problems. 
These problems occur with NCO 5.0.4 built/tested under
MacOS 11.6 with netCDF 4.8.0 on HDF5 1.12.0 and with
Linux with netCDF 4.8.1 on HDF5 1.8.19.

A. NOT YET FIXED (NCO problem)
   Correctly read arrays of NC_STRING with embedded delimiters in ncatted arguments

   Demonstration:
   ncatted -D 5 -O -a new_string_att,att_var,c,sng,"list","of","str,ings" ~/nco/data/in_4.nc ~/foo.nc
   ncks -m -C -v att_var ~/foo.nc

   20130724: Verified problem still exists
   TODO nco1102
   Cause: NCO parsing of ncatted arguments is not sophisticated
   enough to handle arrays of NC_STRINGS with embedded delimiters.

B. NOT YET FIXED (NCO problem?)
   ncra/ncrcat (not ncks) hyperslabbing can fail on variables with multiple record dimensions

   Demonstration:
   ncrcat -O -d time,0 ~/nco/data/mrd.nc ~/foo.nc

   20140826: Verified problem still exists
   20140619: Problem reported by rmla
   Cause: Unsure. Maybe ncra.c loop structure not amenable to MRD?
   Workaround: Convert to fixed dimensions then hyperslab

KNOWN PROBLEMS DUE TO BASE LIBRARIES/PROTOCOLS:

A. NOT YET FIXED (netCDF4 or HDF5 problem?)
   Specifying strided hyperslab on large netCDF4 datasets leads
   to slowdown or failure with recent netCDF versions.

   Demonstration with NCO <= 4.4.5:
   time ncks -O -d time,0,,12 ~/ET_2000-01_2001-12.nc ~/foo.nc
   Demonstration with NCL:
   time ncl < ~/nco/data/ncl.ncl   
   20140718: Problem reported by Parker Norton
   20140826: Verified problem still exists
   20140930: Finish NCO workaround for problem
   20190201: Possibly this problem was fixed in netCDF 4.6.2 by https://github.com/Unidata/netcdf-c/pull/1001
   Cause: Slow algorithm in nc_var_gets()?
   Workaround #1: Use NCO 4.4.6 or later (avoids nc_var_gets())
   Workaround #2: Convert file to netCDF3 first, then use stride
   Workaround #3: Compile NCO with netCDF >= 4.6.2

B. NOT YET FIXED (netCDF4 library bug)
   Simultaneously renaming multiple dimensions in netCDF4 file can corrupt output

   Demonstration:
   ncrename -O -d lev,z -d lat,y -d lon,x ~/nco/data/in_grp.nc ~/foo.nc # Completes but produces unreadable file foo.nc
   ncks -v one ~/foo.nc

   20150922: Confirmed problem reported by Isabelle Dast, reported to Unidata
   20150924: Unidata confirmed problem
   20160212: Verified problem still exists in netCDF library
   20160512: Ditto
   20161028: Verified problem still exists with netCDF 4.4.1
   20170323: Verified problem still exists with netCDF 4.4.2-development
   20170323: https://github.com/Unidata/netcdf-c/issues/381
   20171102: Verified problem still exists with netCDF 4.5.1-development
   20171107: https://github.com/Unidata/netcdf-c/issues/597
   20190202: Progress has recently been made in netCDF 4.6.3-development
   More details: http://nco.sf.net/nco.html#ncrename_crd

C. NOT YET FIXED (would require DAP protocol change?)
   Unable to retrieve contents of variables including period '.' in name
   Periods are legal characters in netCDF variable names.
   Metadata are returned successfully, data are not.
   DAP non-transparency: Works locally, fails through DAP server.

   Demonstration:
   ncks -O -C -D 3 -v var_nm.dot -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc # Fails to find variable

   20130724: Verified problem still exists. 
   Stopped testing because inclusion of var_nm.dot broke all test scripts.
   NB: Hard to fix since DAP interprets '.' as structure delimiter in HTTP query string.

   Bug tracking: https://www.unidata.ucar.edu/jira/browse/NCF-47

D. NOT YET FIXED (would require DAP protocol change)
   Correctly read scalar characters over DAP.
   DAP non-transparency: Works locally, fails through DAP server.
   Problem, IMHO, is with DAP definition/protocol

   Demonstration:
   ncks -O -D 1 -H -C -m --md5_dgs -v md5_a -p http://thredds-test.ucar.edu/thredds/dodsC/testdods in.nc

   20120801: Verified problem still exists
   Bug report not filed
   Cause: DAP translates scalar characters into 64-element (this
   dimension is user-configurable, but still...), NUL-terminated
   strings so MD5 agreement fails 

"Sticky" reminders:

A. Reminder that NCO works on most HDF4 and HDF5 datasets, e.g., 
   HDF4: AMSR MERRA MODIS ...
   HDF5: GLAS ICESat Mabel SBUV ...
   HDF-EOS5: AURA HIRDLS OMI ...

B. Pre-built executables for many OS's at:
   http://nco.sf.net#bnr

